{
	"blocks": [
		{
			"name": "!default event",
			"aseba": {
				"initCodeExec": [
					"timer.period[1] = 100\n"
				],
				"sectionBegin": "onevent timer1\n"
			}
		},
		{
			"name": "!stop",
			"aseba": {
				"statement": "motor.left.target = 0\nmotor.right.target = 0\n"
			}
		},
		{
			"name": "button",
			"aseba": {
				"sectionBegin": "onevent buttons\n",
				"sectionPriority": 10,
				"clauseAnd": "`$[i] ? 'button.' + ['center', 'forward', 'backward', 'right', 'left'][i] + ' != 0' : ''`"
			}
		},
		{
			"name": "init",
			"aseba": {
				"sectionBegin": "# initialization\n",
				"sectionPriority": 10000
			}
		},
		{
			"name": "state 256",
			"aseba": {
				"initVarDecl": [
					"var state256\n",
					"var state2560\n"
				],
				"initCodeExec": [
					"state256 = 0\n"
				],
				"clauseInit":
					"state2560 = state256\n",
				"clause":
					"state2560 == `$.reduce(function (a, b, i) { return b ? a | (1 << [0,7,6,5,4,3,2,1][i]) : a; }, 0)`"
			}
		},
		{
			"name": "state 256 with mask",
			"aseba": {
				"initVarDecl": [
					"var state256\n",
					"var state2560\n"
				],
				"initCodeExec": [
					"state256 = 0\n"
				],
				"clauseInit":
					"state2560 = state256\n",
				"clause":
					"(state2560 & `$.reduce(function (a, b, i) { return b !== 0 ? a | (1 << [0,7,6,5,4,3,2,1][i]) : a; }, 0)`) == `$.reduce(function (a, b, i) { return b === 1 ? a | (1 << [0,7,6,5,4,3,2,1][i]) : a; }, 0)`"
			}
		},
		{
			"name": "roll",
			"aseba": {
				"initVarDecl": [
					"# roll angle from accelerometer\nvar rollAngle\n"
				],
				"sectionBegin": "onevent acc\n",
				"sectionPriority": 1,
				"clauseInit":
					"call math.atan2(rollAngle, -acc[0], acc[2])\n",
				"clause": "rollAngle >= `Math.round(2730.67 * $[0] - 1365.33)` and rollAngle < `Math.round(2730.67 * $[0] + 1365.33)`"
			}
		},
		{
			"name": "acc side",
			"aseba": {
				"initVarDecl": [
					"# roll angle from accelerometer\nvar rollAngle\n"
				],
				"sectionBegin": "onevent acc\n",
				"sectionPriority": 1,
				"clauseInit":
					"call math.atan2(rollAngle, acc[0], acc[2])\n",
				"clause": "abs(abs(rollAngle) - 16384) < 1365"
			}
		},
		{
			"name": "acc upside down",
			"aseba": {
				"sectionBegin": "onevent acc\n",
				"sectionPriority": 1,
				"clause": "-acc[2] / 2 > abs(acc[0]) + abs(acc[1])"
			}
		},
		{
			"name": "yaw",
			"aseba": {
				"initVarDecl": [
					"# yaw angle from accelerometer\nvar yawAngle\n"
				],
				"sectionBegin": "onevent acc\n",
				"sectionPriority": 1,
				"clauseInit":
					"call math.atan2(yawAngle, acc[0], acc[1])\n",
				"clause": "yawAngle >= `Math.round(-2730.67 * $[0] - 1365.33)` and yawAngle < `Math.round(-2730.67 * $[0] + 1365.33)`"
			}
		},
		{
			"name": "pitch",
			"aseba": {
				"initVarDecl": [
					"# pitch angle from accelerometer\nvar pitchAngle\n"
				],
				"sectionBegin": "onevent acc\n",
				"sectionPriority": 1,
				"clauseInit":
					"call math.atan2(pitchAngle, acc[1], acc[2])\n",
				"clause": "pitchAngle >= `Math.round(2730.67 * $[0] - 1365.33)` and pitchAngle < `Math.round(2730.67 * $[0] + 1365.33)`"
			}
		},
		{
			"name": "clap",
			"aseba": {
				"initCodeExec": [
					"# setup threshold for detecting claps\nmic.threshold = 250\n"
				],
				"sectionBegin": "onevent mic\n",
				"sectionPriority": 1,
				"clause": "mic.intensity > mic.threshold",
				"clauseOptional": true
			}
		},
		{
			"name": "fall",
			"aseba": {
				"sectionBegin": "onevent acc\n",
				"sectionPriority": 1,
				"clause": "abs(acc[0]) + abs(acc[1]) + abs(acc[2]) < 16"
			}
		},
		{
			"name": "tap",
			"aseba": {
				"sectionBegin":
					"onevent tap\n",
				"sectionPriority": 1000
			}
		},
		{
			"name": "color 8 state",
			"aseba": {
				"initVarDecl": [
					"# RGB color of the top led\nvar topColor[3]\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0]\n"
				],
				"clause": "topColor[0] `$[0] >= 4 ? '>=' : '<'` 16 and topColor[1] `$[0] % 4 >= 2 ? '>=' : '<'` 16 and topColor[0] `$[0] % 2 ? '>=' : '<'` 16"
			}
		},
		{
			"name": "bottom color 8 state",
			"aseba": {
				"initVarDecl": [
					"# RGB color of the bottom led\nvar bottomColor[3]\n"
				],
				"initCodeExec": [
					"bottomColor = [0, 0, 0]\n"
				],
				"clause": "bottomColor[0] `$[0] >= 4 ? '>=' : '<'` 16 and bottomColor[1] `$[0] % 4 >= 2 ? '>=' : '<'` 16 and bottomColor[0] `$[0] % 2 ? '>=' : '<'` 16"
			}
		},
		{
			"name": "horiz prox front",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"sectionPriority": 1,
				"clauseAnd": "`$[i] ? 'prox.horizontal[' + i + '] ' + ($[i] > 0 ? '>= 2' : '<= 1') + '000' : ''`"
			}
		},
		{
			"name": "horiz prox back",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"sectionPriority": 1,
				"clauseAnd": "`$[i] ? 'prox.horizontal[' + (i + 5) + '] ' + ($[i] > 0 ? '>= 2' : '<= 1') + '000' : ''`"
			}
		},
		{
			"name": "horiz prox front adv",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"sectionPriority": 1,
				"clauseAnd": "`i < 5 && $[i] ? 'prox.horizontal[' + i + '] ' + ($[i] > 0 ? '>= ' : '<= ') + Math.round(7 + 33 * $[5]) + '00' : ''`"
			}
		},
		{
			"name": "horiz prox back adv",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"sectionPriority": 1,
				"clauseAnd": "`i < 2 && $[i] ? 'prox.horizontal[' + (i + 5) + '] ' + ($[i] > 0 ? '>= ' : '<= ') + Math.round(7 + 33 * $[2]) + '00' : ''`"
			}
		},
		{
			"name": "ground mean",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"sectionPriority": 1,
				"clause": "prox.ground.delta[0] + prox.ground.delta[1] `$[0] ? '>= 900' : '<= 800'`"
			}
		},
		{
			"name": "ground",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"sectionPriority": 1,
				"clauseAnd": "`$[i] ? 'prox.ground.delta[' + i + '] ' + ($[i] > 0 ? '>= 450' : '<= 400') : ''`"
			}
		},
		{
			"name": "ground 1",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"sectionPriority": 1,
				"clauseAnd": "`i < 2 && $[i] ? 'prox.ground.delta[' + i + '] ' + ($[i] > 0 ? '>= ' : '<= ') + 25 * Math.round(40 * $[2]) : ''`"
			}
		},
		{
			"name": "remote control arrows",
			"aseba": {
				"sectionBegin": "onevent rc5\n",
				"sectionPriority": 10,
				"clause": "`[[85, 17], [80, 32], [81, 33], [86, 16, 78], [87, 13]][$[0]].map(function (c) { return 'rc5.command == ' + c; }).join(' or ')`"
			}
		},
		{
			"name": "remote control keypad",
			"aseba": {
				"sectionBegin": "onevent rc5\n",
				"sectionPriority": 10,
				"clause": "rc5.command == `$[0]`"
			}
		},
		{
			"name": "timer",
			"aseba": {
				"initCodeExec": [
					"# stop timer 0\ntimer.period[0] = 0\n"
				],
				"sectionBegin": "onevent timer0\ntimer.period[0] = 0\n",
				"sectionPriority": 1000
			}
		},
		{
			"name": "counter comparison",
			"aseba": {
				"initVarDecl": [
					"var state256\n",
					"var state2560\n"
				],
				"initCodeExec": [
					"state256 = 0\n"
				],
				"clauseInit":
					"state2560 = state256\n",
				"clause":
					"state2560 `['<=','<','==','>','>='][$[0] + 2]` `$[1]`"
			}
		},
		{
			"name": "motor",
			"aseba": {
				"initCodeExec": [
					"# reset outputs\ncall sound.system(-1)\ncall leds.top(0, 0, 0)\ncall leds.bottom.left(0, 0, 0)\ncall leds.bottom.right(0, 0, 0)\ncall leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
				],
				"statement":
					"motor.left.target = `Math.round(500 * $[0])`\nmotor.right.target = `Math.round(500 * $[1])`\n"
			}
		},
		{
			"name": "move",
			"aseba": {
				"initCodeExec": [
					"# reset outputs\ncall sound.system(-1)\ncall leds.top(0, 0, 0)\ncall leds.bottom.left(0, 0, 0)\ncall leds.bottom.right(0, 0, 0)\ncall leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
				],
				"statement":
					"motor.left.target = `[0,200,250,100,-150,-200,-250,-100,150][$[0]]`\nmotor.right.target = `[0,200,150,-100,-250,-200,-150,100,250][$[0]]`\n"
			}
		},
		{
			"name": "top color 8",
			"aseba": {
				"initVarDecl": [
					"# RGB color of the top led\nvar topColor[3]\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0]\n",
					"# reset outputs\ncall sound.system(-1)\ncall leds.top(0, 0, 0)\ncall leds.bottom.left(0, 0, 0)\ncall leds.bottom.right(0, 0, 0)\ncall leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
				],
				"statement":
					"call leds.top(`['0,0,0','0,32,0','0,32,32','0,0,32','32,0,32','32,0,0','32,32,0','32,32,32'][$[0]]`)\ntopColor = [`['0,0,0','0,32,0','0,32,32','0,0,32','32,0,32','32,0,0','32,32,0','32,32,32'][$[0]]`]\n"
			}
		},
		{
			"name": "bottom color 8",
			"aseba": {
				"initVarDecl": [
					"# RGB color of the bottom led\nvar bottomColor[3]\n"
				],
				"initCodeExec": [
					"bottomColor = [0, 0, 0]\n",
					"# reset outputs\ncall sound.system(-1)\ncall leds.top(0, 0, 0)\ncall leds.bottom.left(0, 0, 0)\ncall leds.bottom.right(0, 0, 0)\ncall leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
				],
				"statement":
					"call leds.bottom.left(`['0,0,0','0,32,0','0,32,32','0,0,32','32,0,32','32,0,0','32,32,0','32,32,32'][$[0]]`)\ncall leds.bottom.right(`['0,0,0','0,32,0','0,32,32','0,0,32','32,0,32','32,0,0','32,32,0','32,32,32'][$[0]]`)\nbottomColor = [`['0,0,0','0,32,0','0,32,32','0,0,32','32,0,32','32,0,0','32,32,0','32,32,32'][$[0]]`]\n"
			}
		},
		{
			"name": "top color",
			"aseba": {
				"initVarDecl": [
					"# RGB color of the top led\nvar topColor[3]\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0]\n",
					"# reset outputs\ncall sound.system(-1)\ncall leds.top(0, 0, 0)\ncall leds.bottom.left(0, 0, 0)\ncall leds.bottom.right(0, 0, 0)\ncall leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
				],
				"statement":
					"call leds.top(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\ntopColor = [`$.map(function (x) { return Math.round(32 * x); }).join(', ')`]\n",
				"statementWithoutInit":
					"call leds.top(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\n"
			}
		},
		{
			"name": "bottom color",
			"aseba": {
				"initVarDecl": [
					"# RGB color of the bottom led\nvar bottomColor[3]\n"
				],
				"initCodeExec": [
					"bottomColor = [0, 0, 0]\n",
					"# reset outputs\ncall sound.system(-1)\ncall leds.top(0, 0, 0)\ncall leds.bottom.left(0, 0, 0)\ncall leds.bottom.right(0, 0, 0)\ncall leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
				],
				"statement":
					"call leds.bottom.left(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\ncall leds.bottom.right(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\nbottomColor = [`$.map(function (x) { return Math.round(32 * x); }).join(', ')`]\n",
				"statementWithoutInit":
					"call leds.top(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\n"
			}
		},
		{
			"name": "set state 256",
			"aseba": {
				"initVarDecl": [
					"var state256\n"
				],
				"initCodeExec": [
					"state256 = 0\n"
				],
				"initCodeDecl": [
					"sub display_state256\ncall leds.circle((state256&1)*32,(state256&128)/4,(state256&64)/2,state256&32,(state256&16)*2,(state256&8)*4,(state256&4)*8,(state256&2)*16)\n"
				],
				"statement":
					"state256 = `$.reduce(function (a, b, i) { return b ? a | (1 << [0,7,6,5,4,3,2,1][i]) : a; }, 0)`\ncallsub display_state256\n"
			}
		},
		{
			"name": "set state 256 with mask",
			"aseba": {
				"initVarDecl": [
					"var state256\n"
				],
				"initCodeExec": [
					"state256 = 0\n"
				],
				"initCodeDecl": [
					"sub display_state256\ncall leds.circle((state256&1)*32,(state256&128)/4,(state256&64)/2,state256&32,(state256&16)*2,(state256&8)*4,(state256&4)*8,(state256&2)*16)\n"
				],
				"statement":
					"state256 = state256 & `$.reduce(function (a, b, i) { return b === 0 ? a | (1 << [0,7,6,5,4,3,2,1][i]) : a; }, 0)` | `$.reduce(function (a, b, i) { return b === 1 ? a | (1 << [0,7,6,5,4,3,2,1][i]) : a; }, 0)`\ncallsub display_state256\n"
			}
		},
		{
			"name": "notes",
			"aseba": {
				"initVarDecl": [
					"# variables for notes\nvar notes[6]\nvar durations[6]\nvar note_index\nvar note_count\nvar wave[142]\nvar i\nvar wave_phase\nvar wave_intensity\n"
				],
				"initCodeExec": [
					"# init. variables for notes\nnote_index = 6\nnote_count = 6\n",
					"# compute a sinus wave for sound\nfor i in 0 : 141 do\nwave_phase = (i - 70) * 468\ncall math.cos(wave_intensity, wave_phase)\nwave[i] = wave_intensity / 256\nend\ncall sound.wave(wave)\n",
					"# reset outputs\ncall sound.system(-1)\ncall leds.top(0, 0, 0)\ncall leds.bottom.left(0, 0, 0)\ncall leds.bottom.right(0, 0, 0)\ncall leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
				],
				"initCodeDecl": [
					"# when a note is finished, play the next one\nonevent sound.finished\nif note_index != note_count then\ncall sound.freq(notes[note_index], durations[note_index])\nnote_index++\nend\n"
				],
				"statement":
					"notes = [`$.filter(function (a, i) { return i % 2 == 0; }).map(function (h, i) { return $[2 * i + 1] ? [262, 311, 370, 440, 524, 370][h] : 0; }).join(', ')`]\ndurations = [`$.filter(function (a, i) { return i % 2 == 1; }).map(function (d) { return d ? 7 * d : 28; }).join(', ')`]\nnote_index = 1\nnote_count = 6\ncall sound.freq(notes[0], durations[0])\n"
			}
		},
		{
			"name": "notes with speed",
			"aseba": {
				"initVarDecl": [
					"# variables for notes\nvar notes[6]\nvar durations[6]\nvar note_index\nvar note_count\nvar wave[142]\nvar i\nvar wave_phase\nvar wave_intensity\n"
				],
				"initCodeExec": [
					"# init. variables for notes\nnote_index = 6\nnote_count = 6\n",
					"# compute a sinus wave for sound\nfor i in 0 : 141 do\nwave_phase = (i - 70) * 468\ncall math.cos(wave_intensity, wave_phase)\nwave[i] = wave_intensity / 256\nend\ncall sound.wave(wave)\n",
					"# reset outputs\ncall sound.system(-1)\ncall leds.top(0, 0, 0)\ncall leds.bottom.left(0, 0, 0)\ncall leds.bottom.right(0, 0, 0)\ncall leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
				],
				"initCodeDecl": [
					"# when a note is finished, play the next one\nonevent sound.finished\nif note_index != note_count then\ncall sound.freq(notes[note_index], durations[note_index])\nnote_index++\nend\n"
				],
				"statement":
					"notes = [`$.filter(function (a, i) { return i % 2 == 1; }).map(function (h, i) { return $[2 * i + 2] ? [262, 311, 370, 440, 524, 370][h] : 0; }).join(', ')`]\ndurations = [`$.slice(1).filter(function (a, i) { return i % 2 == 1; }).map(function (d) { return Math.round(Math.pow(2, $[0]) * 7) * (d ? d : 4); }).join(', ')`]\nnote_index = 1\nnote_count = 6\ncall sound.freq(notes[0], durations[0])\n"
			}
		},
		{
			"name": "set timer",
			"aseba": {
				"initCodeExec": [
					"# stop timer 0\ntimer.period[0] = 0\n"
				],
				"statement":
					"timer.period[0] = `Math.round(1000 * $[0])`\n"
			}
		},
		{
			"name": "arithmetic",
			"aseba": {
				"initVarDecl": [
					"var state256\n"
				],
				"initCodeExec": [
					"state256 = 0\n"
				],
				"statement":
					"state256 `['','+','-','*','/'][$[0]]`= `$[1]`\n"
			}
		}
	]
}
