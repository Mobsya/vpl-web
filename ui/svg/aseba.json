{
	"blocks": [
		{
			"name": "!default event",
			"aseba": {
				"initCodeExec": [
					"timer.period[1] = 100\n"
				],
				"sectionBegin": "onevent timer1\n",
				"sectionPriority": 99
			}
		},
		{
			"name": "!stop",
			"aseba": {
				"statement": [
					"motor.left.target = 0\n",
					"motor.right.target = 0\n"
				]
			}
		},
		{
			"name": "button 1",
			"aseba": {
				"initVarDecl": [
					[
						"var buttonCenter = 0\n",
						"var buttonForward = 0\n",
						"var buttonBackward = 0\n",
						"var buttonRight = 0\n",
						"var buttonLeft = 0\n"
					]
				],
				"initCodeDecl": [
					[
						"onevent buttons\n",
						"when button.center == 1 do\n",
						"buttonCenter = 1\n",
						"end\n",
						"when button.forward == 1 do\n",
						"buttonForward = 1\n",
						"end\n",
						"when button.backward == 1 do\n",
						"buttonBackward = 1\n",
						"end\n",
						"when button.right == 1 do\n",
						"buttonRight = 1\n",
						"end\n",
						"when button.left == 1 do\n",
						"buttonLeft = 1\nend\n"
					]
				],
				"clause": "button`['Center', 'Forward', 'Backward', 'Right', 'Left'][$[0]]` != 0",
				"statement": "button`['Center', 'Forward', 'Backward', 'Right', 'Left'][$[0]]` = 0\n"
			}
		},
		{
			"name": "init",
			"aseba": {
				"sectionBegin": "# initialization\n",
				"sectionPriority": 300
			}
		},
		{
			"name": "state 256",
			"aseba": {
				"initVarDecl": [
					"var state256\n",
					"var state2560\n"
				],
				"initCodeExec": [
					"state256 = 0\n"
				],
				"clauseInit":
					"state2560 = state256\n",
				"clause":
					"state2560 == `$.reduce(function (a, b, i) { return b ? a | (1 << [0,7,6,5,4,3,2,1][i]) : a; }, 0)`"
			}
		},
		{
			"name": "state 256 with mask",
			"aseba": {
				"initVarDecl": [
					"var state256\n",
					"var state2560\n"
				],
				"initCodeExec": [
					"state256 = 0\n"
				],
				"clauseInit":
					"state2560 = state256\n",
				"clause":
					"(state2560 & `$.reduce(function (a, b, i) { return b !== 0 ? a | (1 << [0,7,6,5,4,3,2,1][i]) : a; }, 0)`) == `$.reduce(function (a, b, i) { return b === 1 ? a | (1 << [0,7,6,5,4,3,2,1][i]) : a; }, 0)`"
			}
		},
		{
			"name": "roll",
			"aseba": {
				"initVarDecl": [
					[
						"# roll angle from accelerometer\n",
						"var rollAngle\n"
					]
				],
				"sectionBegin": "onevent acc\n",
				"sectionPriority": 40,
				"clauseInit":
					"call math.atan2(rollAngle, -acc[0], acc[2])\n",
				"clause": "rollAngle >= `Math.round(2730.67 * $[0] - 1365.33)` and rollAngle < `Math.round(2730.67 * $[0] + 1365.33)`"
			}
		},
		{
			"name": "acc side",
			"aseba": {
				"initVarDecl": [
					[
						"# roll angle from accelerometer\n",
						"var rollAngle\n"
					]
				],
				"sectionBegin": "onevent acc\n",
				"sectionPriority": 40,
				"clauseInit":
					"call math.atan2(rollAngle, acc[0], acc[2])\n",
				"clause": "abs(abs(rollAngle) - 16384) < 1365"
			}
		},
		{
			"name": "acc upside down",
			"aseba": {
				"sectionBegin": "onevent acc\n",
				"sectionPriority": 40,
				"clause": "-acc[2] / 2 > abs(acc[0]) + abs(acc[1])"
			}
		},
		{
			"name": "yaw",
			"aseba": {
				"initVarDecl": [
					"# yaw angle from accelerometer\nvar yawAngle\n"
				],
				"sectionBegin": "onevent acc\n",
				"sectionPriority": 40,
				"clauseInit":
					"call math.atan2(yawAngle, acc[1], -acc[0])\n",
				"clause": "yawAngle >= `Math.round(-2730.67 * $[0] - 1365.33)` and yawAngle < `Math.round(-2730.67 * $[0] + 1365.33)`"
			}
		},
		{
			"name": "pitch",
			"aseba": {
				"initVarDecl": [
					[
						"# pitch angle from accelerometer\n",
						"var pitchAngle\n"
					]
				],
				"sectionBegin": "onevent acc\n",
				"sectionPriority": 40,
				"clauseInit":
					"call math.atan2(pitchAngle, -acc[1], acc[2])\n",
				"clause": "pitchAngle >= `Math.round(2730.67 * $[0] - 1365.33)` and pitchAngle < `Math.round(2730.67 * $[0] + 1365.33)`"
			}
		},
		{
			"name": "clap",
			"aseba": {
				"initCodeExec": [
					[
						"# setup threshold for detecting claps\n",
						"mic.threshold = 250\n"
					]
				],
				"sectionBegin": "onevent mic\n",
				"sectionPriority": 30,
				"clause": "mic.intensity > mic.threshold",
				"clauseOptional": true
			}
		},
		{
			"name": "fall",
			"aseba": {
				"sectionBegin": "onevent acc\n",
				"sectionPriority": 40,
				"clause": "abs(acc[0]) + abs(acc[1]) + abs(acc[2]) < 16"
			}
		},
		{
			"name": "tap",
			"aseba": {
				"sectionBegin": "onevent tap\n",
				"sectionPriority": 50
			}
		},
		{
			"name": "color 8 state",
			"aseba": {
				"initVarDecl": [
					[
						"# RGB color of the top led\n",
						"var topColor[3]\n"
					],
					"var topColor0[3]\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0]\n"
				],
				"clauseInit": "topColor0 = topColor\n",
				"clause": "topColor0[0] `$[0] % 2 ? '>=' : '<'` 16 and topColor0[1] `$[0] % 4 >= 2 ? '>=' : '<'` 16 and topColor0[2] `$[0] >= 4 ? '>=' : '<'` 16"
			}
		},
		{
			"name": "bottom color 8 state",
			"aseba": {
				"initVarDecl": [
					[
						"# RGB color of the bottom led\n",
						"var bottomColor[3]\n"
					],
					"var bottomColor0[3]\n"
				],
				"initCodeExec": [
					"bottomColor = [0, 0, 0]\n"
				],
				"clauseInit": "bottomColor0 = bottomColor\n",
				"clause": "bottomColor0[0] `$[0] % 2 ? '>=' : '<'` 16 and bottomColor0[1] `$[0] % 4 >= 2 ? '>=' : '<'` 16 and bottomColor0[2] `$[0] >= 4 ? '>=' : '<'` 16"
			}
		},
		{
			"name": "horiz prox front",
			"aseba": {
				"initVarDecl": [
					[
						"var proxClose[] = [0, 0, 0, 0, 0, 0, 0]\n",
						"var proxFar[] = [0, 0, 0, 0, 0, 0, 0]\n",
						"var groundDark[] = [0, 0]\n",
						"var groundLight[] = [0, 0]\n"
					]
				],
				"initCodeDecl": [
					[
						"onevent prox\n",
						"when prox.horizontal[0] > 2000 do\n",
						"proxClose[0] = 1\n",
						"end\n",
						"when prox.horizontal[1] > 2000 do\n",
						"proxClose[1] = 1\n",
						"end\n",
						"when prox.horizontal[2] > 2000 do\n",
						"proxClose[2] = 1\n",
						"end\n",
						"when prox.horizontal[3] > 2000 do\n",
						"proxClose[3] = 1\n",
						"end\n",
						"when prox.horizontal[4] > 2000 do\n",
						"proxClose[4] = 1\n",
						"end\n",
						"when prox.horizontal[5] > 2000 do\n",
						"proxClose[5] = 1\n",
						"end\n",
						"when prox.horizontal[6] > 2000 do\n",
						"proxClose[6] = 1\n",
						"end\n",
						"when prox.horizontal[0] < 1000 do\n",
						"proxFar[0] = 1\n",
						"end\n",
						"when prox.horizontal[1] < 1000 do\n",
						"proxFar[1] = 1\n",
						"end\n",
						"when prox.horizontal[2] < 1000 do\n",
						"proxFar[2] = 1\n",
						"end\n",
						"when prox.horizontal[3] < 1000 do\n",
						"proxFar[3] = 1\n",
						"end\n",
						"when prox.horizontal[4] < 1000 do\n",
						"proxFar[4] = 1\n",
						"end\n",
						"when prox.horizontal[5] < 1000 do\n",
						"proxFar[5] = 1\n",
						"end\n",
						"when prox.horizontal[6] < 1000 do\n",
						"proxFar[6] = 1\n",
						"end\n",
						"when prox.ground.delta[0] > 450 do\n",
						"groundLight[0] = 1\n",
						"end\n",
						"when prox.ground.delta[1] > 450 do\n",
						"groundLight[1] = 1\n",
						"end\n",
						"when prox.ground.delta[0] < 400 do\n",
						"groundDark[0] = 1\n",
						"end\n",
						"when prox.ground.delta[1] < 400 do\n",
						"groundDark[1] = 1\n",
						"end\n"
					]
				],
				"clauseAnd": "`$[i] ? 'prox' + ($[i] > 0 ? 'Close' : 'Far') + '[' + i + '] == 1' : ''`",
				"statement1": "`$[i] ? 'prox' + ($[i] > 0 ? 'Close' : 'Far') + '[' + i + '] = 0\\n' : ''`"
			}
		},
		{
			"name": "horiz prox back",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"sectionPriority": 20,
				"clauseAnd": "`$[i] ? 'prox.horizontal[' + (i + 5) + '] ' + ($[i] > 0 ? '>= 2' : '<= 1') + '000' : ''`"
			}
		},
		{
			"name": "horiz prox front adv",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"sectionPriority": 20,
				"clauseAnd": "`i < 5 && $[i] ? 'prox.horizontal[' + i + '] ' + ($[i] > 0 ? '>= ' : '<= ') + Math.round(7 + 33 * $[5]) + '00' : ''`"
			}
		},
		{
			"name": "horiz prox back adv",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"sectionPriority": 20,
				"clauseAnd": "`i < 2 && $[i] ? 'prox.horizontal[' + (i + 5) + '] ' + ($[i] > 0 ? '>= ' : '<= ') + Math.round(7 + 33 * $[2]) + '00' : ''`"
			}
		},
		{
			"name": "ground mean",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"sectionPriority": 10,
				"clause": "prox.ground.delta[0] + prox.ground.delta[1] `$[0] ? '>= 900' : '<= 800'`"
			}
		},
		{
			"name": "ground",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"sectionPriority": 10,
				"clauseAnd": "`$[i] ? 'prox.ground.delta[' + i + '] ' + ($[i] > 0 ? '>= 450' : '<= 400') : ''`"
			}
		},
		{
			"name": "ground 1",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"sectionPriority": 10,
				"clauseAnd": "`i < 2 && $[i] ? 'prox.ground.delta[' + i + '] ' + ($[i] > 0 ? '>= ' : '<= ') + 25 * Math.round(40 * $[2]) : ''`"
			}
		},
		{
			"name": "remote control arrows",
			"aseba": {
				"sectionBegin": "onevent rc5\n",
				"sectionPriority": 100,
				"clause": "`[[85, 17], [80, 32], [81, 33], [86, 16, 78], [87, 13]][$[0]].map(function (c) { return 'rc5.command == ' + c; }).join(' or ')`"
			}
		},
		{
			"name": "remote control keypad",
			"aseba": {
				"sectionBegin": "onevent rc5\n",
				"sectionPriority": 100,
				"clause": "rc5.command == `$[0]`"
			}
		},
		{
			"name": "timer",
			"aseba": {
				"initCodeExec": [
					[
						"# stop timer 0\n",
						"timer.period[0] = 0\n"
					]
				],
				"sectionBegin": [
					"onevent timer0\n",
					"timer.period[0] = 0\n"
				],
				"sectionPriority": 200
			}
		},
		{
			"name": "counter comparison",
			"aseba": {
				"initVarDecl": [
					"var state256\n",
					"var state2560\n"
				],
				"initCodeExec": [
					"state256 = 0\n"
				],
				"clauseInit":
					"state2560 = state256\n",
				"clause":
					"state2560 `['<=','<','==','>','>='][$[0] + 2]` `$[1]`"
			}
		},
		{
			"name": "motor",
			"aseba": {
				"initCodeExec": [
					[
						"# reset outputs\n",
						"call sound.system(-1)\n",
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"statement":
					[
						"motor.left.target = `Math.round(500 * $[0])`\n",
						"motor.right.target = `Math.round(500 * $[1])`\n"
					]
			}
		},
		{
			"name": "move",
			"aseba": {
				"initCodeExec": [
					[
						"# reset outputs\n",
						"call sound.system(-1)\n",
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"statement":
					[
						"motor.left.target = `[0,200,250,100,-150,-200,-250,-100,150][$[0]]`\n",
						"motor.right.target = `[0,200,150,-100,-250,-200,-150,100,250][$[0]]`\n"
					]
			}
		},
		{
			"name": "top color 8",
			"aseba": {
				"initVarDecl": [
					[
						"# RGB color of the top led\n",
						"var topColor[3]\n"
					]
				],
				"initCodeExec": [
					"topColor = [0, 0, 0]\n",
					[
						"# reset outputs\n",
						"call sound.system(-1)\n",
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"statement":
					[
						"call leds.top(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`)\n",
						"topColor = [`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`]\n"
					]
			}
		},
		{
			"name": "bottom color 8",
			"aseba": {
				"initVarDecl": [
					[
						"# RGB color of the bottom led\n",
						"var bottomColor[3]\n"
					]
				],
				"initCodeExec": [
					"bottomColor = [0, 0, 0]\n",
					[
						"# reset outputs\n",
						"call sound.system(-1)\n",
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"statement": [
					"call leds.bottom.left(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`)\n",
					"call leds.bottom.right(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`)\n",
					"bottomColor = [`['0,0,0','0,32,0','0,32,32','0,0,32','32,0,32','32,0,0','32,32,0','32,32,32'][$[0]]`]\n"
				]
			}
		},
		{
			"name": "top color",
			"aseba": {
				"initVarDecl": [
					"# RGB color of the top led\nvar topColor[3]\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0]\n",
					[
						"# reset outputs\n",
						"call sound.system(-1)\n",
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"statement": [
					"call leds.top(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\n",
					"topColor = [`$.map(function (x) { return Math.round(32 * x); }).join(', ')`]\n"
				],
				"statementWithoutInit":
					"call leds.top(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\n"
			}
		},
		{
			"name": "bottom color",
			"aseba": {
				"initVarDecl": [
					[
						[
							"# RGB color of the bottom led\n",
							"var bottomColor[3]\n"
						]
					]
				],
				"initCodeExec": [
					"bottomColor = [0, 0, 0]\n",
					[
						"# reset outputs\n",
						"call sound.system(-1)\n",
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"statement": [
					"call leds.bottom.left(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\n",
					"call leds.bottom.right(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\n",
					"bottomColor = [`$.map(function (x) { return Math.round(32 * x); }).join(', ')`]\n"
				],
				"statementWithoutInit":
					"call leds.top(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\n"
			}
		},
		{
			"name": "set state 256",
			"aseba": {
				"initVarDecl": [
					"var state256\n"
				],
				"initCodeExec": [
					"state256 = 0\n"
				],
				"initCodeDecl": [
					[
						"sub display_state256\n",
						"call leds.circle((state256&1)*32,(state256&128)/4,(state256&64)/2,state256&32,(state256&16)*2,(state256&8)*4,(state256&4)*8,(state256&2)*16)\n"
					]
				],
				"statement": [
					"state256 = `$.reduce(function (a, b, i) { return b ? a | (1 << [0,7,6,5,4,3,2,1][i]) : a; }, 0)`\n",
					"callsub display_state256\n"
				]
			}
		},
		{
			"name": "set state 256 with mask",
			"aseba": {
				"initVarDecl": [
					"var state256\n"
				],
				"initCodeExec": [
					"state256 = 0\n"
				],
				"initCodeDecl": [
					[
						"sub display_state256\n",
						"call leds.circle((state256&1)*32,(state256&128)/4,(state256&64)/2,state256&32,(state256&16)*2,(state256&8)*4,(state256&4)*8,(state256&2)*16)\n"
					]
				],
				"statement":
					"state256 = state256 & `$.reduce(function (a, b, i) { return b === 0 ? a | (1 << [0,7,6,5,4,3,2,1][i]) : a; }, 0)` | `$.reduce(function (a, b, i) { return b === 1 ? a | (1 << [0,7,6,5,4,3,2,1][i]) : a; }, 0)`\ncallsub display_state256\n"
			}
		},
		{
			"name": "notes",
			"aseba": {
				"initVarDecl": [
					[
						"# variables for notes\n",
						"var notes[6]\n",
						"var durations[6]\n",
						"var note_index\n",
						"var note_count\n",
						"var wave[142]\n",
						"var i\n",
						"var wave_phase\n",
						"var wave_intensity\n"
					]
				],
				"initCodeExec": [
					[
						"# init. variables for notes\n",
						"note_index = 6\n",
						"note_count = 6\n"
					],
					[
						"# compute a sinus wave for sound\n",
						"for i in 0 : 141 do\n",
						"wave_phase = (i - 70) * 468\n",
						"call math.cos(wave_intensity, wave_phase)\n",
						"wave[i] = wave_intensity / 256\n",
						"end\ncall sound.wave(wave)\n"
					],
					[
						"# reset outputs\n",
						"call sound.system(-1)\n",
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"initCodeDecl": [
					[
						"# when a note is finished, play the next one\n",
						"onevent sound.finished\n",
						"if note_index != note_count then\n",
						"call sound.freq(notes[note_index], durations[note_index])\n",
						"note_index++\n",
						"end\n"
					]
				],
				"statement": [
					"notes = [`$.filter(function (a, i) { return i % 2 == 0; }).map(function (h, i) { return $[2 * i + 1] ? [262, 311, 370, 440, 524, 370][h] : 0; }).join(', ')`]\n",
					"durations = [`$.filter(function (a, i) { return i % 2 == 1; }).map(function (d) { return d ? 7 * d : 28; }).join(', ')`]\n",
					"note_index = 1\n",
					"note_count = 6\n",
					"call sound.freq(notes[0], durations[0])\n"
				]
			}
		},
		{
			"name": "notes with speed",
			"aseba": {
				"initVarDecl": [
					[
						"# variables for notes\n",
						"var notes[6]\n",
						"var durations[6]\n",
						"var note_index\n",
						"var note_count\n",
						"var wave[142]\n",
						"var i\n",
						"var wave_phase\n",
						"var wave_intensity\n"
					]
				],
				"initCodeExec": [
					[
						"# init. variables for notes\n",
						"note_index = 6\n",
						"note_count = 6\n"
					],
					[
						"# compute a sinus wave for sound\n",
						"for i in 0 : 141 do\n",
						"wave_phase = (i - 70) * 468\n",
						"call math.cos(wave_intensity, wave_phase)\n",
						"wave[i] = wave_intensity / 256\n",
						"end\n",
						"call sound.wave(wave)\n"
					],
					[
						"# reset outputs\n",
						"call sound.system(-1)\n",
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"initCodeDecl": [
					[
						"# when a note is finished, play the next one\n",
						"onevent sound.finished\n",
						"if note_index != note_count then\n",
						"call sound.freq(notes[note_index], durations[note_index])\n",
						"note_index++\n",
						"end\n"
					]
				],
				"statement": [
					"notes = [`$.filter(function (a, i) { return i % 2 == 1; }).map(function (h, i) { return $[2 * i + 2] ? [262, 311, 370, 440, 524, 370][h] : 0; }).join(', ')`]\n",
					"durations = [`$.slice(1).filter(function (a, i) { return i % 2 == 1; }).map(function (d) { return Math.round(Math.pow(2, $[0]) * 7) * (d ? d : 4); }).join(', ')`]\n",
					"note_index = 1\n",
					"note_count = 6\n",
					"call sound.freq(notes[0], durations[0])\n"
				]
			}
		},
		{
			"name": "set timer",
			"aseba": {
				"initCodeExec": [
					[
						"# stop timer 0\n",
						"timer.period[0] = 0\n"
					]
				],
				"statement":
					"timer.period[0] = `Math.round(1000 * $[0])`\n"
			}
		},
		{
			"name": "arithmetic",
			"aseba": {
				"initVarDecl": [
					"var state256\n"
				],
				"initCodeExec": [
					"state256 = 0\n"
				],
				"initCodeDecl": [
					[
						"sub display_state256\n",
						"call leds.circle((state256&1)*32,(state256&128)/4,(state256&64)/2,state256&32,(state256&16)*2,(state256&8)*4,(state256&4)*8,(state256&2)*16)\n"
					]
				],
				"statement": [
					"`$[2] && $[0] != 0 && $[0] != 4 && $[1] != 0 ? 'if state256 ' + ($[0] == 2 ? '< ' + $[1] + ' then\\nstate256 = 0\\n' : '> ' + [null,255-$[1],null,Math.floor(255/$[1])][$[0]] + ' then\\nstate256 = 255\\n') + 'else\\nstate256 ' + ['','+','-','*','/'][$[0]] + '= ' + $[1] + '\\nend' : 'state256 ' + ['','+','-','*','/'][$[0]] + '= ' + $[1]`\n",
					"callsub display_state256\n"
				]
			}
		}
	]
}
