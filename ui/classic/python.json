{
	"blocks": [
		{
			"name": "!stop",
			"python": {
				"statement": [
					"self.set(\"motor.left\", 0)\n",
					"self.set(\"motor.right\", 0)\n"
				]
			}
		},
		{
			"name": "button",
			"python": {
				"sectionBegin": "def event_buttons(self):\n",
				"sectionEnd": "<\n",
				"clause": "`['center', 'forward', 'backward', 'right', 'left'].map(function (s, i) { return $[i] ? 'self.get(\"button.' + s + '\")' : ''; }).filter(function (s) { return s; }).join(' and ') || ['center', 'forward', 'backward', 'right', 'left'].map(function (s) { return 'self.get(\"button.' + s + '\")'; }).join(' or ')`"
			}
		},
		{
			"name": "button 1",
			"python": {
				"sectionBegin": "def event_buttons(self):\n",
				"sectionEnd": "<\n",
				"clause": "self.get(\"button.`['center', 'forward', 'backward', 'right', 'left'][$[0]]`\")"
			}
		},
		{
			"name": "horiz prox",
			"python": {
				"sectionBegin": "def event_prox(self):\n",
				"sectionEnd": "<\n",
				"clause": "`[2, 1, 3, 0, 4, 5, 6].map(function (ix, i) { return $[i] ? 'self.get(\"prox.horizontal\")[' + ix + '] ' + ($[i] > 0 ? '>' : '<') + '= 0.5' : ''; }).filter(function (s) { return s; }).join(' or ')`"
			}
		},
		{
			"name": "horiz prox adv",
			"python": {
				"sectionBegin": "def event_prox(self):\n",
				"sectionEnd": "<\n",
				"clause": "`[2, 1, 3, 0, 4, 5, 6].map(function (ix, i) { return $[i] ? 'self.get(\"prox.horizontal\")[' + ix + '] ' + ($[i] > 0 ? '>= ' + toFixed($[7]) : '<= ' + toFixed($[8])) : ''; }).filter(function (s) { return s; }).join(' and ') || [2, 1, 3, 0, 4, 5, 6].map(function (ix) { return 'self.get(\"prox.horizontal\")[' + ix + '] ' + ($[i] > 0 ? '>= ' + toFixed($[7]) : '<= ' + toFixed($[8])); }).join(' or ')`"
			}
		},
		{
			"name": "horiz prox 1",
			"python": {
				"sectionBegin": "def event_prox(self):\n",
				"sectionEnd": "<\n",
				"clause": "`[2, 1, 3, 0, 4, 5, 6].map(function (ix, i) { return $[i] ? 'self.get(\"prox.horizontal\")[' + ix + '] ' + ($[i] > 0 ? '>= ' : '<= ') + toFixed($[7]) : ''; }).filter(function (s) { return s; }).join(' and ') || [2, 1, 3, 0, 4, 5, 6].map(function (ix) { return 'self.get(\"prox.horizontal\")[' + ix + '] ' + ($[i] > 0 ? '>= ' : '<= ') + toFixed($[7]); }).join(' or ')`"
			}
		},
		{
			"name": "ground",
			"python": {
				"sectionBegin": "def event_prox(self):\n",
				"sectionEnd": "<\n",
				"clause": "`[0, 1].map(function (ix, i) { return $[i] ? 'self.get(\"prox.ground.delta\")[' + ix + '] ' + ($[i] > 0 ? '>' : '<') + '= 0.5' : ''; }).filter(function (s) { return s; }).join(' or ')`"
			}
		},
		{
			"name": "ground adv",
			"python": {
				"sectionBegin": "def event_prox(self):\n",
				"sectionEnd": "<\n",
				"clause": "`[0, 1].map(function (ix, i) { return $[i] ? 'self.get(\"prox.ground.delta\")[' + ix + '] ' + ($[i] > 0 ? '>= ' + toFixed($[2]) : '<= ' + toFixed($[3])) : ''; }).filter(function (s) { return s; }).join(' and ') || [0, 1].map(function (ix) { return 'self.get(\"prox.ground.delta\")[' + ix + '] ' + ($[i] > 0 ? '>= ' : '<= ') + toFixed($[2]); }).join(' or ')`"
			}
		},
		{
			"name": "ground 1",
			"python": {
				"sectionBegin": "def event_prox(self):\n",
				"sectionEnd": "<\n",
				"clause": "`[0, 1].map(function (ix, i) { return $[i] ? 'self.get(\"prox.ground.delta\")[' + ix + '] ' + ($[i] > 0 ? '>= ' : '<= ') + toFixed($[2]) : ''; }).filter(function (s) { return s; }).join(' and ') || [0, 1].map(function (ix) { return 'self.get(\"prox.ground.delta\")[' + ix + '] ' + ($[i] > 0 ? '>= ' : '<= ') + toFixed($[2]); }).join(' or ')`"
			}
		},
		{
			"name": "tap",
			"python": {
				"sectionBegin": "def event_tap(self):\n",
				"sectionEnd": "<\n"
			}
		},
		{
			"name": "accelerometer",
			"python": {
				"initCodeExec": [
					"`$[0] == 0 ? 'tapped = False\\n' : ''`"
				],
				"sectionBegin": "def event_acc(self):\n",
				"sectionEnd": "<\n",
				"sectionPreamble": "`$[0] == 0 ? 'tapped = True\\n' : ''`",
				"clauseInit": "`$[0] === 1 ? 'rollAngle = math.atan2(acc[0], acc[2]);\\n' : $[0] === 2 ? 'pitchAngle = math.atan2(acc[1], acc[2]);\\n' : ''`",
				"clause": "`$[0] == 0 ? 'tapped' : (function (name, a) { return a <= -6 ? name + ' < ' + (Math.PI / 12 * (a + 0.5)).toFixed(2) : a >= 6 ? name + ' >= ' + (Math.PI / 12 * (a - 0.5)).toFixed(2) : name + ' >= ' + (Math.PI / 12 * (a - 0.5)).toFixed(2) + ' && ' + name + ' < ' + (Math.PI / 12 * (a + 0.5)).toFixed(2); })($[0] === 1 ? 'rollAngle' : 'pitchAngle', $[0] === 2 ? $[1] : -$[1])`"
			}
		},
		{
			"name": "roll",
			"python": {
				"sectionBegin": "def event_acc(self):\n",
				"sectionEnd": "<\n",
				"clauseInit":
					"rollAngle = math.atan2(acc[0], acc[2])\n",
				"clause":
					"rollAngle >= `toFixed2(Math.PI / 12 * ($[0] - 0.5))` and rollAngle < `toFixed2(Math.PI / 12 * ($[0] + 0.5))`"
			}
		},
		{
			"name": "pitch",
			"python": {
				"sectionBegin": "def event_acc(self):\n",
				"sectionEnd": "<\n",
				"clauseInit":
					"pitchAngle = math.atan2(acc[1], acc[2])\n",
				"clause":
					"pitchAngle >= `toFixed2(Math.PI / 12 * (-$[0] - 0.5))` and pitchAngle < `toFixed2(Math.PI / 12 * ($[0] + 0.5))`"
			}
		},
		{
			"name": "yaw",
			"python": {
				"sectionBegin": "def event_acc(self):\n",
				"sectionEnd": "<\n",
				"clauseInit":
					"yawAngle = math.atan2(acc[0], acc[1])\n",
				"clause":
					"yawAngle >= `toFixed2(Math.PI / 12 * ($[0] - 0.5))` and yawAngle < `toFixed2(Math.PI / 12 * ($[0] + 0.5))`"
			}
		},
		{
			"name": "clap",
			"python": {
				"sectionBegin": "def event_mic(self):\n",
				"sectionEnd": "<\n"
			}
		},
		{
			"name": "init",
			"python": {
					"sectionBegin": "# init block\n"
			}
		},
		{
			"name": "timer",
			"python": {
				"initCodeExec": [
					[
						"# stop timer 0\n",
						"self.setTimer(0, -1)\n"
					]
				],
				"sectionBegin": "def event_timer0(self):\n",
				"sectionEnd": "<\n"
			}
		},
		{
			"name": "state",
			"python": {
					"initVarDecl": [
						[
							"# variables for state\n",
							"self.setClientState(\"state\", [])\n"
						]
					],
					"initCodeExec": [
						"self.setClientState(\"state\", [False, False, False, False])\n"
					],
					"clauseInit": "state0 = self.getClientState(\"state\")\n",
					"clause": "`$.map(function (v, i) { return (v >= 0 ? '' : '!') + 'state0[' + i + ']'; }).filter(function (v, i) { return $[i]; }).join(' and ')`"
			}
		},
		{
			"name": "state 8",
			"python": {
				"initVarDecl": [
					[
						"# variable for exclusive state\n",
						"self.setClientState(\"state8\", 0)\n"
					]
				],
				"initCodeExec": [
					"self.setClientState(\"state8\", 0)\n"
				],
				"clauseInit": "state80 = self.getClientState(\"state8\")\n",
				"clause": "state80 == `$[0].toString(10)`"
			}
		},
		{
			"name": "counter comparison",
			"python": {
					"initVarDecl": [
						[
							"# variable for counter\n",
							"self.setClientState(\"counter\", 0)\n"
						]
					],
					"initCodeExec": [
						"self.setClientState(\"counter\", 0)\n"
					],
					"clauseInit": "counter0 = self.getClientState(\"counter\")\n",
					"clause": "counter0 `$[0] === 0 ? '==' : $[0] > 0 ? '>=' : '<='` `$[1]`"
			}
		},
		{
			"name": "color state",
			"python": {
				"clause": "`$.map(function (p, i) { return 'topColor[' + i + '] / 11 == ' + Math.floor(p * 2.99); }).join(' and ')`"
			}
		},
		{
			"name": "color 8 state",
			"python": {
				"clause": "`$.map(function (p, i) { return 'topColor[' + i + '] / 11 == ' + Math.floor(p * 2.99); }).join(' and ')`"
			}
		},
		{
			"name": "motor state",
			"python": {
				"clause": [
					"`$[0] == 0 ? 'abs(' : ''`this.get(\"motor.left\")`$[0] > 0 ? ' > ' : $[0] < 0 ? ' < -' : ') < '`0.1 ",
					"and `$[1] == 0 ? 'abs(' : ''`this.get(\"motor.right\")`$[1] > 0 ? ' > ' : $[1] < 0 ? ' < -' : ') < '`0.1"
				]
			}
		},
		{
			"name": "motor",
			"python": {
					"initCodeExec": [
						"self.set(\"leds.top\", [0, 0, 0])\n"
					],
				"statement": [
					"self.set(\"motor.left\", `toFixed($[0])`)\n",
					"self.set(\"motor.right\", `toFixed($[1])`)\n"
				]
			}
		},
		{
			"name": "move",
			"python": {
					"initCodeExec": [
						"self.set(\"leds.top\", [0, 0, 0])\n"
					],
				"statement": [
					"self.set(\"motor.left\", `toFixed([0, 0.2, -0.2, 0.2-0.05, 0.2+0.05, -0.2, 0.2][$[0]])`)\n",
					"self.set(\"motor.right\", `toFixed([0, 0.2, -0.2, 0.2+0.05, 0.2-0.05, 0.2, -0.2][$[0]])`)\n"
				]
			}
		},
		{
			"name": "top color",
			"python": {
				"initCodeExec": [
					"self.set(\"leds.top\", [0, 0, 0])\n"
				],
				"statement":
					"self.set(\"leds.top\", [`$.map(toFixed).join(', ')`])\n"
			}
		},
		{
			"name": "top color 8",
			"python": {
					"initCodeExec": [
						"self.set(\"leds.top\", [0, 0, 0])\n"
					],
					"statement":
						"self.set(\"leds.top\", [`['0,0,0','1,0,0','0,1,0','1,1,0','0,0,1','1,0,1','0,1,1','1,1,1'][$[0]]`])\n"
			}
		},
		{
			"name": "bottom color",
			"python": {
					"initCodeExec": [
						"self.set(\"leds.top\", [0, 0, 0])\n"
					],
				"statement": [
					"self.set(\"leds.bottom.left\", [`$.map(toFixed).join(', ')`])\n",
					"self.set(\"leds.bottom.right\", [`$.map(toFixed).join(', ')`])\n"
				]
			}
		},
		{
			"name": "bottom-left color",
			"python": {
				"initCodeExec": [
					"self.set(\"leds.top\", [0, 0, 0])\n"
				],
				"statement":
					"self.set(\"leds.bottom.left\", [`$.map(toFixed).join(', ')`])\n"
			}
		},
		{
			"name": "bottom-right color",
			"python": {
				"initCodeExec": [
					"self.set(\"leds.top\", [0, 0, 0])\n"
				],
				"statement":
					"self.set(\"leds.bottom.right\", [`$.map(toFixed).join(', ')`])\n"
			}
		},
		{
			"name": "bottom color 8",
			"python": {
				"initCodeExec": [
					"self.set(\"leds.top\", [0, 0, 0])\n"
				],
				"statement": [
					"self.set(\"leds.bottom.left\", [`['0,0,0','1,0,0','0,1,0','1,1,0','0,0,1','1,0,1','0,1,1','1,1,1'][$[0]]`])\n",
					"self.set(\"leds.bottom.right\", [`['0,0,0','1,0,0','0,1,0','1,1,0','0,0,1','1,0,1','0,1,1','1,1,1'][$[0]]`])\n"
				]
			}
		},
		{
			"name": "bottom-left color 8",
			"python": {
				"initCodeExec": [
					"self.set(\"leds.top\", [0, 0, 0])\n"
				],
				"statement":
					"self.set(\"leds.bottom.left\", [`['0,0,0','1,0,0','0,1,0','1,1,0','0,0,1','1,0,1','0,1,1','1,1,1'][$[0]]`])\n"
			}
		},
		{
			"name": "bottom-right color 8",
			"python": {
				"initCodeExec": [
					"self.set(\"leds.top\", [0, 0, 0])\n"
				],
				"statement":
					"self.set(\"leds.bottom.right\", [`['0,0,0','1,0,0','0,1,0','1,1,0','0,0,1','1,0,1','0,1,1','1,1,1'][$[0]]`])\n"
			}
		},
		{
			"name": "notes",
			"python": {
				"initCodeExec": [
					[
						"# init notes\n",
						"self.set(\"sound\", {})\n",
						"self.set(\"leds.top\", [0, 0, 0])\n"
					]
				],
				"statement":
					"self.set(\"sound\", {\"f\": [`$.filter(function (a, i) { return i % 2 == 0; }).map(function (h, i) { return $[2 * i + 1] ? [262, 311, 370, 440, 524, 370][h] : 0; }).join(', ')`], \"d\": [`$.filter(function (a, i) { return i % 2 == 1; }).map(function (d) { return d ? 7 * d : 28; }).join(', ')`]})\n"
			}
		},
		{
			"name": "play",
			"python": {
 				"initCodeExec": [
					"# init notes\nself.set(\"sound\", {})\n"
				],
				"statement": "self.set(\"sound\", {\"pcm\": `$[0]`})\n"
			}
		},
		{
			"name": "play stop",
			"python": {
 				"initCodeExec": [
					"# init notes\nself.set(\"sound\", {})\n"
				],
				"statement": "self.set(\"sound\", {})\n"
			}
		},
		{
			"name": "set state",
			"python": {
				"initVarDecl": [
					[
						"# variables for state\n",
						"self.setClientState(\"state\", [])\n"
					]
				],
				"initCodeExec": [
					"self.setClientState(\"state\", [False, False, False, False])\n"
				],
				"statement": [
					"state = this.getClientState(\"state\")\n",
					"`$.map(function (v, i) { return v ? 'state[' + i + '] = ' + (v > 0 ? 'True' : 'False') + '\\n' : ''; }).join('')`",
					"self.setClientState(\"state\", state)\n",
					"`$[0] || $[1] || $[2] || $[3] ? 'self.set(\"leds.circle\", [0,state[1]?1:0,0,state[3]?1:0,0,state[2]?1:0,0,state[0]?1:0])\\n' : ''`"
				]
			}
		},
		{
			"name": "toggle state",
			"python": {
				"initVarDecl": [
					[
						"# variables for state\n",
						"self.setClientState(\"state\", [])\n"
					]
				],
				"initCodeExec": [
					"self.setClientState(\"state\", [False, False, False, False])\n"
				],
				"statement": [
					"state = this.getClientState(\"state\")\n",
					"`$.map(function (v, i) { return v ? 'state[' + i + '] = !state[' + i + ']\\n' : ''; }).join('')`",
					"self.setClientState(\"state\", state)\n",
					"`$[0] || $[1] || $[2] || $[3] ? 'self.set(\"leds.circle\", [0,state[1]?1:0,0,state[3]?1:0,0,state[2]?1:0,0,state[0]?1:0])\\n' : ''`"
				]
			}
		},
		{
			"name": "set state 8",
			"python": {
					"initVarDecl": [
						[
							"# variable for exclusive state\n",
							"self.setClientState(\"state8\", 0)\n"
						]
					],
					"initCodeExec": [
						"self.setClientState(\"state8\", 0)\n"
					],
					"statement": [
						"self.setClientState(\"state8\", `$[0].toString(10)`)\n",
						"self.set(\"leds.circle\", [`[0,1,2,3,4,5,6,7].map(function (i) { return $[0] === i; }).join(', ')`])\n"
					],
					"statementWithoutInit":
						"self.set(\"leds.circle\", [`[0,1,2,3,4,5,6,7].map(function (i) { return $[0] === i; }).join(', ')`])\n"
			}
		},
		{
			"name": "change state 8",
			"python": {
					"initVarDecl": [
						[
							"# variable for exclusive state\n",
							"self.setClientState(\"state8\", 0)\n"
						]
					],
					"initCodeExec": [
						"self.setClientState(\"state8\", 0)\n"
					],
				"statement": [
					"state8 = (this.getClientState(\"state8\") + `$[0] > 0 ? 1 : 7`) % 8",
					"self.setClientState(\"state8\", state8)\n",
					"self.set(\"leds.circle\", [`[0,1,2,3,4,5,6,7].map(function (i) { return 'state8 === ' + i.toString(10); }).join(', ')`])\n"
				],
				"statementWithoutInit":
					"self.set(\"leds.circle\", [`$[0] === 0 ? 1 : 0`,`$[0] === 1 ? 1 : 0`,`$[0] === 2 ? 1 : 0`,`$[0] === 3 ? 1 : 0`,`$[0] === 4 ? 1 : 0`,`$[0] === 5 ? 1 : 0`,`$[0] === 6 ? 1 : 0`,`$[0] === 7 ? 1 : 0`])\n"
			}
		},
		{
			"name": "set counter",
			"python": {
					"initVarDecl": [
						[
							"# variable for counter\n",
							"self.setClientState(\"counter\", 0)\n"
						]
					],
					"initCodeExec": [
						"self.setClientState(\"counter\", 0)\n"
					],
				"statement": [
					"counter = `$[0] === 0 ? 0 : $[0] > 0 ? 'Math.min(this.getClientState(\"counter\") + 1, 255)' : 'Math.max(this.getClientState(\"counter\") - 1, 0)'`\n",
					"self.setClientState(\"counter\", counter)\n",
					"self.set(\"leds.circle\", [counter&1?1:0,counter&2?1:0,counter&4?1:0,counter&8?1:0,counter&16?1:0,counter&32?1:0,counter&64?1:0,counter&128?1:0])\n"
				]
			}
		},
		{
			"name": "set timer",
			"python": {
					"initCodeExec": [
						[
							"# stop timer 0\n",
							"self.setTimer(0, -1)\n"
						]
					],
					"statement": "self.setTimer(0, `$[0].toFixed(3)`)\n"
			}
		},
		{
			"name": "set timer log",
			"python": {
				"initCodeExec": [
					[
						"# stop timer 0\n",
						"self.setTimer(0, -1)\n"
					]
				],
				"statement": "self.setTimer(0, `$[0].toFixed(3)`)\n"
			}
		},
		{
			"name": "picture comment",
			"python": {}
		}
	]
}
