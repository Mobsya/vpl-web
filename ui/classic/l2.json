{
	"blocks": [
		{
			"name": "!stop",
			"l2": {
				"statement": [
					"motor.left.target = 0;\n",
					"motor.right.target = 0;\n",
					"sound.system(-1);\n",
					"leds.circle(32,32,32,32,32,32,32,32);\n",
					"timer.period[0] = 100;\n",
					"onevent timer0 {\n",
					"leds.circle(0,0,0,0,0,0,0,0);\n",
					"}\n"
				]
			}
		},
		{
			"name": "button",
			"l2": {
				"sectionBegin": "onevent buttons {\n",
				"sectionEnd": "}\n",
				"clause": "`['center', 'forward', 'backward', 'right', 'left'].map(function (s, i) { return $[i] ? s : ''; }).filter(function (s) { return s; }).join(' && ') || ['center', 'forward', 'backward', 'right', 'left'].map(function (s) { return 'button.' + s; }).join(' || ')`"
			}
		},
		{
			"name": "button 1",
			"l2": {
				"sectionBegin": "onevent buttons {\n",
				"sectionEnd": "}\n",
				"clause": "button.`['center', 'forward', 'backward', 'right', 'left'][$[0]]`"
			}
		},
		{
			"name": "horiz prox",
			"l2": {
				"sectionBegin": "onevent prox {\n",
				"sectionEnd": "}\n",
				"clause": "`[2, 1, 3, 0, 4, 5, 6].map(function (ix, i) { return $[i] ? 'prox.horizontal[' + ix + '] ' + ($[i] > 0 ? '>= 2000' : '<= 1000') : ''; }).filter(function (s) { return s; }).join(' && ') || [2, 1, 3, 0, 4, 5, 6].map(function (ix) { return 'prox.horizontal[' + ix + '] >= 2000'; }).join(' || ')`"
			}
		},
		{
			"name": "horiz prox adv",
			"l2": {
				"sectionBegin": "onevent prox {\n",
				"sectionEnd": "}\n",
				"clause": "`[2, 1, 3, 0, 4, 5, 6].map(function (ix, i) { return $[i] ? 'prox.horizontal[' + ix + '] ' + ($[i] > 0 ? '>= ' + Math.round(7 + 33 * $[7] : '<= ' + Math.round(7 + 33 * $[8])) + '00' : ''; }).filter(function (s) { return s; }).join(' && ') || [2, 1, 3, 0, 4, 5, 6].map(function (ix) { return 'prox.horizontal[' + ix + '] >= 2000'; }).join(' || ')`"
			}
		},
		{
			"name": "horiz prox 1",
			"l2": {
				"sectionBegin": "onevent prox {\n",
				"sectionEnd": "}\n",
				"clause": "`[2, 1, 3, 0, 4, 5, 6].map(function (ix, i) { return $[i] ? 'prox.horizontal[' + ix + '] ' + ($[i] > 0 ? '>= ' : '<= ') + Math.round(7 + 33 * $[7] + '00' : ''; }).filter(function (s) { return s; }).join(' && ') || [2, 1, 3, 0, 4, 5, 6].map(function (ix) { return 'prox.horizontal[' + ix + '] >= 2000'; }).join(' || ')`"
			}
		},
		{
			"name": "ground",
			"l2": {
				"sectionBegin": "onevent prox {\n",
				"sectionEnd": "}\n",
				"clause": "`[0, 1].map(function (ix, i) { return $[i] ? 'prox.ground.delta[' + ix + '] ' + ($[i] > 0 ? '>= 450' : '<= 400') : ''; }).filter(function (s) { return s; }).join(' && ') || [0, 1].map(function (ix) { return 'prox.ground.delta[' + ix + '] >= 450'; }).join(' || ')`"
			}

		},
		{
			"name": "ground adv",
			"l2": {
				"sectionBegin": "onevent prox {\n",
				"sectionEnd": "}\n",
				"clause": "`[0, 1].map(function (ix, i) { return $[i] ? 'prox.ground.delta[' + ix + '] ' + ($[i] > 0 ? '>= ' + Math.round(25 + 40 * $[2]) : '<= ' + Math.round(25 + 40 * $[3])) : ''; }).filter(function (s) { return s; }).join(' && ') || [0, 1].map(function (ix) { return 'prox.ground.delta[' + ix + '] >= 450'; }).join(' || ')`"
			}
		},
		{
			"name": "ground 1",
			"l2": {
				"sectionBegin": "onevent prox {\n",
				"sectionEnd": "}\n",
				"clause": "`[0, 1].map(function (ix, i) { return $[i] ? 'prox.ground.delta[' + ix + '] ' + ($[i] > 0 ? '>= ' : '<= ') + Math.round(25 + 40 * $[2]) : ''; }).filter(function (s) { return s; }).join(' && ') || [0, 1].map(function (ix) { return 'prox.ground.delta[' + ix + '] >= 450'; }).join(' || ')`"
			}
		},
		{
			"name": "tap",
			"l2": {
				"initVarDecl": [
					"bool tapped;\n"
				],
				"initCodeExec": [
					"tapped = false;\n"
				],
				"sectionBegin": "onevent tap {\n",
				"sectionEnd": "}\n",
				"sectionPreamble": "tapped = true;\n",
				"clause": "tapped"
			}
		},
		{
			"name": "accelerometer",
			"l2": {
				"initVarDecl": [
					"`$[0] == 0 ? 'bool tapped;\\n' : ''`"
				],
				"initCodeExec": [
					"`$[0] == 0 ? 'tapped = false;\\n' : ''`"
				],
				"sectionBegin": "onevent `$[0] == 0 ? 'tap' : 'acc'` {\n",
				"sectionEnd": "}\n",
				"sectionPreamble": "`$[0] == 0 ? 'tapped = true;\\n' : ''`",
				"clauseInit": "`$[0] == 1 ? 'fixed rollAngle = atan2(acc[0], acc[2]);\\n' : $[0] == 2 ? 'fixed pitchAngle = atan2(acc[1], acc[2]);\\n' : ''`",
				"clause": "`[0] == 0 ? 'tapped' : (function (name, a) { return a <= -6 ? name + ' < ' + (Math.PI / 12 * (a + 0.5)).toFixed(2) : a >= 6 ? name + ' >= ' + (Math.PI / 12 * (a - 0.5)).toFixed(2) : name + ' >= ' + (Math.PI / 12 * (a - 0.5)).toFixed(2) + ' && ' + name + ' < ' + (Math.PI / 12 * (a + 0.5)).toFixed(2); })($[0] === 1 ? 'rollAngle' : 'pitchAngle', $[0] === 2 ? -$[1] : $[1])`"
			}
		},
		{
			"name": "roll",
			"l2": {
				"sectionBegin": "onevent acc {\n",
				"sectionEnd": "}\n",
				"clauseInit":
					"fixed rollAngle = atan2(acc[0], acc[2]);\n",
				"clause":
					"rollAngle >= `(Math.PI / 12 * ($[0] - 0.5)).toFixed(2)` && rollAngle < `(Math.PI / 12 * ($[0] + 0.5)).toFixed(2)`"
			}
		},
		{
			"name": "pitch",
			"l2": {
				"sectionBegin": "onevent acc {\n",
				"sectionEnd": "}\n",
				"clauseInit":
					"fixed pitchAngle = atan2(acc[1], acc[2]);\n",
				"clause":
					"pitchAngle >= `(Math.PI / 12 * (-$[0] - 0.5)).toFixed(2)` && pitchAngle < `(Math.PI / 12 * (-$[0] + 0.5)).toFixed(2)`"
			}
		},
		{
			"name": "yaw",
			"l2": {
				"sectionBegin": "onevent acc {\n",
				"sectionEnd": "}\n",
				"clauseInit":
					"fixed yawAngle = atan2(acc[0], acc[1]);\n",
				"clause":
					"yawAngle >= `(Math.PI / 12 * ($[0] - 0.5)).toFixed(2)` && yawAngle < `(Math.PI / 12 * ($[0] + 0.5)).toFixed(2)`"
			}
		},
		{
			"name": "clap",
			"l2": {
				"initCodeExec": [
					[
						"// setup threshold for detecting claps\n",
						"mic.threshold = 250\n"
					]
				],
				"sectionBegin": "onevent mic {\n",
				"sectionEnd": "}\n",
				"clause": "mic.intensity > mic.threshold",
				"clauseOptional": true
			}
		},
		{
			"name": "init",
			"l2": {
				"sectionBegin": "// initialization\n"
			}
		},
		{
			"name": "timer",
			"l2": {
				"initVarDecl": [
					"bool timerElapsed;\n"
				],
				"initCodeExec": [
					[
						"// stop timer 0\n",
						"timer.period[0] = 0;\n"
					],
					"timerElapsed = false;\n"
				],
				"sectionBegin": "onevent timer0 {\n",
				"sectionEnd": "}\n",
				"sectionPreamble": "timerElapsed = true;\ntimer.period[0] = 0;\n",
				"clause": "timerElapsed"
			}
		},
		{
			"name": "state",
			"l2": {
				"initVarDecl": [
					[
						"// variables for state\n",
						"bool state[4];\n"
					]
				],
				"initCodeExec": [
					"state = [false, false, false, false];\n"
				],
				"clause": "`$.map(function (v, i) { return (v >= 0 ? '' : '!') + 'state[' + i + ']'; }).filter(function (v, i) { return $[i]; }).join(' && ')`"
			}
		},
		{
			"name": "state 8",
			"l2": {
				"initVarDecl": [
					[
						"// variables for exclusive state\n",
						"int state8;\n"
					]
				],
				"initCodeExec": [
					"state8 = 0;\n"
				],
				"clause": "state8 == `$[0]`"
			}
		},
		{
			"name": "counter comparison",
			"l2": {
				"initVarDecl": [
					"int counter;\n"
				],
				"initCodeExec": [
					"counter = 0;\n"
				],
				"clause": "counter `$[0] === 0 ? '==' : $[0] > 0 ? '>=' : '<='` `$[1]`"
			}
		},
		{
			"name": "color state",
			"l2": {
				"initVarDecl": [
					"int topColor[3];\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0];\n"
				],
				"clause": "`$.map(function (p, i) { return 'topColor[' + i + '] / 11 == ' + Math.floor(p * 2.99); }).join(' && ')`"
			}
		},
		{
			"name": "color 8 state",
			"l2": {
				"initVarDecl": [
					"int topColor[3];\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0];\n"
				],
				"clause": "topColor[0] `$[0] % 2 ? '>=' : '<'` 16 && topColor[1] `$[0] % 4 >= 2 ? '>=' : '<'` 16 && topColor[2] `$[0] >= 4 ? '>=' : '<'` 16"
			}
		},
		{
			"name": "motor state",
			"l2": {
				"clause": [
					"`$[0] == 0 ? 'abs(' : ''`motor.left.target`$[0] > 0 ? ' > ' : $[0] < 0 ? ' < -' : ') < '`250 ",
					"&& `$[1] == 0 ? 'abs(' : ''`motor.right.target`$[1] > 0 ? ' > ' : $[1] < 0 ? ' < -' : ') < '`250"
				]
			}
		},
		{
			"name": "motor",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement":
					[
						"motor.left.target = `Math.round(500 * $[0])`;\n",
						"motor.right.target = `Math.round(500 * $[1])`;\n"
					]
			}
		},
		{
			"name": "move",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"motor.left.target = `[0, sp, -sp, sp-spt, sp+spt, -sp, sp][$[0]]`;\n",
					"motor.right.target = `[0, sp, -sp, sp+spt, sp-spt, sp, -sp][$[0]]`;\n"
				]
			}
		},
		{
			"name": "top color",
			"l2": {
				"initVarDecl": [
					"int topColor[3];\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0];\n",
					[
						"// reset outputs\nsound.system(-1);\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.top(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`);\n",
					"topColor = [`$.map(function (x) { return Math.round(32 * x); }).join(', ')`];\n"
				],
				"statementWithoutInit":
					"leds.top(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`);\n"
			}
		},
		{
			"name": "top color 8",
			"l2": {
				"initVarDecl": [
					"int topColor[3];\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0];\n",
					[
						"// reset outputs\nsound.system(-1);\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.top(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`);\n",
					"topColor = [`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`];\n"
				]
			}
		},
		{
			"name": "bottom color",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\nsound.system(-1);\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.bottom.left(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`);\n",
					"leds.bottom.right(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`);\n"
				]
			}
		},
		{
			"name": "bottom-left color",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\nsound.system(-1);\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.bottom.left(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`);\n"
				]
			}
		},
		{
			"name": "bottom-right color",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\nsound.system(-1);\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.bottom.right(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`);\n"
				]
			}
		},
		{
			"name": "bottom color 8",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\nsound.system(-1);\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.bottom.left(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`);\n",
					"leds.bottom.right(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`);\n"
				]
			}
		},
		{
			"name": "bottom-left color 8",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\nsound.system(-1);\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.bottom.left(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`);\n"
				]
			}
		},
		{
			"name": "bottom-right color 8",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\nsound.system(-1);\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.bottom.right(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`);\n"
				]
			}
		},
		{
			"name": "notes",
			"l2": {
				"initVarDecl": [
					"const pi = 3.14;\n",
					[
						"// variables for notes\n",
						"int notes[6];\n",
						"int durations[6];\n",
						"int note_index;\n",
						"int wave[142];\n"
					]
				],
				"initCodeExec": [
					[
						"// init notes\n",
						"for (int i = 0; i < size(wave); i++) {\n",
						"wave[i] = 128 * sin(fixed(i) / size(wave) * 2 * pi);\n",
						"}\n",
						"sound.wave(wave);\n",
						"note_index = 6;\n"
					],
					[
						"// reset outputs\nsound.system(-1);\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"initCodeDecl": [
					[
						"// when a note is finished, play the next one\n",
						"onevent sound.finished {\n",
						"if (note_index < size(notes)) {\n",
						"sound.freq(notes[note_index], durations[note_index]);\n",
						"note_index++;\n",
						"}\n",
						"}\n"
					]
				],
				"statement": [
					"notes = [`$.filter(function (a, i) { return i % 2 == 0; }).map(function (h, i) { return $[2 * i + 1] ? [262, 311, 370, 440, 524, 370][h] : 0; }).join(', ')`];\n",
					"durations = [`$.filter(function (a, i) { return i % 2 == 1; }).map(function (d) { return d ? 7 * d : 28; }).join(', ')`];\n",
					"note_index = 1;\n",
					"note_count = 6;\n",
					"sound.freq(notes[0], durations[0]);\n"
				]
			}
		},
		{
			"name": "set state",
			"l2": {
				"initVarDecl": [
					[
						"// variables for state\n",
						"bool state[4];\n"
					]
				],
				"initCodeExec": [
					"state = [false, false, false, false];\n"
				],
				"initCodeDecl": [
					[
						"// display the current state\n",
						"void display_state() {\n",
						"leds.circle(0,state[1]?32:0,0,state[3]?32:0,0,state[2]?32:0,0,state[0]?32:0);\n",
						"}\n"
					]
				],
				"statement": [
					"`$.map(function (v, i) { return 'state[' + i + '] = ' + (v > 0 ? 'true' : 'false') + ';\\n'; }).filter(function (v) { return v; }).join('')`",
					"`$[0] || $[1] || $[2] || $[3] ? 'display_state();\\n' : ''`"
				]
			}
		},
		{
			"name": "toggle state",
			"l2": {
				"initVarDecl": [
					[
						"// variables for state\n",
						"bool state[4];\n"
					]
				],
				"initCodeExec": [
					"state = [false, false, false, false];\n"
				],
				"initCodeDecl": [
					[
						"// display the current state\n",
						"void display_state() {\n",
						"leds.circle(0,state[1]?32:0,0,state[3]?32:0,0,state[2]?32:0,0,state[0]?32:0);\n",
						"}\n"
					]
				],
				"statement": [
					"`$.map(function (v, i) { return 'state[' + i + '] = !state[' + i + '];\\n'; }).filter(function (v) { return v; }).join('')`",
					"`$[0] || $[1] || $[2] || $[3] ? 'display_state();\\n' : ''`"
				]
			}
		},
		{
			"name": "set state 8",
			"l2": {
				"initVarDecl": [
					[
						"// variables for exclusive state\n",
						"int state8;\n"
					]
				],
				"initCodeExec": [
					"state8 = 0;\n"
				],
				"initCodeDecl": [
					[
						"// display the current exclusive state\n",
						"void display_state8() {\n",
						"leds.circle(state8==0?32:0, state8==1?32:0, state8==2?32:0, state8==3?32:0, ",
							"state8==4?32:0, state8==5?32:0, state8==6?32:0, state8==7?32:0);\n",
						"}\n"
					]
				],
				"statement": [
					"state8 = `$[0]`;\n",
					"display_state8();\n"
				],
				"statementWithoutInit": [
					"leds.circle(`$[0] === 0 ? 32 : 0`, `$[0] === 1 ? 32 : 0`, `$[0] === 2 ? 32 : 0`, `$[0] === 3 ? 32 : 0`, ",
						"`$[0] === 4 ? 32 : 0`, `$[0] === 5 ? 32 : 0`, `$[0] === 6 ? 32 : 0`, `$[0] === 7 ? 32 : 0`);\n"
				]
			}
		},
		{
			"name": "change state 8",
			"l2": {
				"initVarDecl": [
					[
						"// variables for exclusive state\n",
						"int state8;\n"
					]
				],
				"initCodeExec": [
					"state8 = 0;\n"
				],
				"initCodeDecl": [
					[
						"// display the current exclusive state\n",
						"void display_state8() {\n",
						"leds.circle(state8==0?32:0, state8==1?32:0, state8==2?32:0, state8==3?32:0, ",
							"state8==4?32:0, state8==5?32:0, state8==6?32:0, state8==7?32:0);\n",
						"}\n"
					]
				],
				"statement": [
					"state8 = (state8 + `$[0] > 0 ? 1 : 7`) % 8;\n",
					"display_state8();\n"
				],
				"statementWithoutInit": [
					"leds.circle(`$[0] === 0 ? 32 : 0`, `$[0] === 1 ? 32 : 0`, `$[0] === 2 ? 32 : 0`, `$[0] === 3 ? 32 : 0`, ",
						"`$[0] === 4 ? 32 : 0`, `$[0] === 5 ? 32 : 0`, `$[0] === 6 ? 32 : 0`, `$[0] === 7 ? 32 : 0`);\n"
				]
			}
		},
		{
			"name": "set counter",
			"l2": {
				"initVarDecl": [
					"int counter;\n"
				],
				"initCodeExec": [
					"counter = 0;\n"
				],
				"initCodeDecl": [
					[
						"// display the current counter\n",
						"void display_counter(int c) {\n",
						"leds.circle((c&1)<<5,(c&2)<<4,(c&4)<<3,(c&8)<<2,\n",
						"(c&16)<<1,c&32,(c&64)>>1,(c&128)>>2);\n",
						"}\n"
					]
				],
				"statement": [
					"`$[0] === 0 ? 'counter = 0;' : $[0] > 0 ? 'if (counter < 255) {\\ncounter++;\\n}' : 'if (counter > 0) {\\ncounter--;\\n}'`\n",
					"display_counter(counter);\n"
				]
			}
		},
		{
			"name": "set timer",
			"l2": {
				"initCodeExec": [
					[
						"// stop timer 0\n",
						"timer.period[0] = 0;\n"
					]
				],
				"statement": "timer.period[0] = `Math.round(1000 * $[0])`;\n"
			}
		},
		{
			"name": "set timer log",
			"l2": {
				"initCodeExec": [
					[
						"// stop timer 0\n",
						"timer.period[0] = 0;\n"
					]
				],
				"statement": "timer.period[0] = `Math.round(1000 * $[0])`;\n"
			}
		},
		{
			"name": "play",
			"l2": {
				"initCodeExec": [
					"sound.system(-1);\n"
				],
				"statement": "sound.play(`$[0].toString(10)`);\n"
			}
		},
		{
			"name": "play stop",
			"l2": {
				"initCodeExec": [
					"sound.system(-1);\n"
				],
				"statement": "sound.play(-1);\n"
			}
		},
		{
			"name": "picture comment",
			"l2": {}
		}
	]
}
