{
	"help": {
		"fr": {
			"blocks": {
				"button 1": [
					"# Bouton simple",
					"![single button](vpl:block:button-1)",
					"Type: bloc d'événement ou de condition",
					"Comme bloc d'événement, le bloc _bouton simple_ active la règle lorsqu'on touche le bouton spécifié sur le Thymio.",
					"Comme bloc de condition, le bloc _bouton simple_ n'autorise l'activation de la règle que si l'on touche le bouton spécifié au moment où l'événement correspondant au 1er bloc à gauche survient."
				],
				"button": [
					"# Multiple buttons",
					"![button](vpl:block:button)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"horiz prox": [
					"# Capteurs de proximité",
					"![Proximity sensors](vpl:block:horiz-prox)",
					"Type: bloc d'événement ou de condition",
					"Comme bloc d'événement, le bloc _capteurs de proximité_ active la règle lorsque les capteurs de proxoîmité spécifiés détectent un obstacle, ou l'absence d'obstacle, en réfléchissant plus qu'une certaine fraction de l'émission infrarouge. Toutes les conditions doivent être remplies simultanément; l'événement ne se produit qu'au moment où le dernier capteur spécifié détecte (ou ne détecte plus) un obstacle.",
					"Comme bloc de condition, le bloc _capteurs de proximité_ n'autorise l'activation de la règle que si les capteurs de proximité spécifiés détectent (ou pas) la présence d'un obstacle."
				],
				"horiz prox adv": [
					"# Proximity sensors with low and high thresholds",
					"![horiz prox adv](vpl:block:horiz-prox-adv)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"horiz prox 1": [
					"# Proximity sensors with threshold",
					"![horiz prox 1](vpl:block:horiz-prox-1)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"ground": [
					"# Ground reflection sensors",
					"![ground](vpl:block:ground)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"ground adv": [
					"# Ground reflection sensors with low and high sensors",
					"![ground adv](vpl:block:ground-adv)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"ground 1": [
					"# Ground reflection sensors with threshold",
					"![ground 1](vpl:block:ground-1)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"tap": [
					"# Impact detection",
					"![tap](vpl:block:tap)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"accelerometer": [
					"# Accelerometer",
					"![accelerometer](vpl:block:accelerometer)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"roll": [
					"# Roll angle",
					"![roll](vpl:block:roll)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"pitch": [
					"# Pitch angle",
					"![pitch](vpl:block:pitch)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"yaw": [
					"# Yaw angle",
					"![yaw](vpl:block:yaw)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"clap": [
					"# Sound detection",
					"![clap](vpl:block:clap)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"init": [
					"# Initialization",
					"![init](vpl:block:init)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"timer": [
					"# Timer elapsed",
					"![timer](vpl:block:timer)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"remote control arrows": [
					"# remote control arrows",
					"![remote control arrows](vpl:block:remote-control-arrows)",
					"Type: bloc d'événement ou de condition",
					"..."
				],
				"state": [
					"# State (4 bits)",
					"![state](vpl:block:state)",
					"Type: bloc de condition",
					"..."
				],
				"state 8": [
					"# State (8 values)",
					"![state 8](vpl:block:state-8)",
					"Type: bloc de condition",
					"..."
				],
				"counter comparison": [
					"# Counter comparison",
					"![counter comparison](vpl:block:counter-comparison)",
					"Type: bloc de condition",
					"..."
				],
				"color state": [
					"# Color state",
					"![color state](vpl:block:color-state)",
					"Type: bloc de condition",
					"..."
				],
				"color 8 state": [
					"# Color state",
					"![color 8 state](vpl:block:color-8-state)",
					"Type: bloc de condition",
					"..."
				],
				"motor state": [
					"# Motor state",
					"![motor state](vpl:block:motor-state)",
					"Type: bloc de condition",
					"..."
				],
				"motor": [
					"# Change les vitesses des moteurs",
					"![Set motor speeds](vpl:block:motor)",
					"Type: bloc d'action",
					"Le bloc _change les vitesses des moteurs_ fixe la vitesse à atteindre pour les moteurs gauche et droit. La combinaison de vitesses permet d'avancer ou de reculer, de tourner et de s'arrêter."
				],
				"move": [
					"# Set motion",
					"![move](vpl:block:move)",
					"Type: bloc d'action",
					"..."
				],
				"nn obstacles": [
					"# Neural net for obstacle avoidance",
					"![nn obstacles](vpl:block:nn-obstacles)",
					"Type: bloc d'action",
					"..."
				],
				"top color": [
					"# Set top color (RGB components)",
					"![top color](vpl:block:top-color)",
					"Type: bloc d'action",
					"..."
				],
				"top color 8": [
					"# Set top color",
					"![top color 8](vpl:block:top-color-8)",
					"Type: bloc d'action",
					"..."
				],
				"bottom color": [
					"# Set bottom color (RGB components)",
					"![bottom color](vpl:block:bottom-color)",
					"Type: bloc d'action",
					"..."
				],
				"bottom-left color": [
					"# Set bottom-left color (RGB components)",
					"![bottom-left color](vpl:block:bottom-left-color)",
					"Type: bloc d'action",
					"..."
				],
				"bottom-right color": [
					"# Set bottom-right color (RGB components)",
					"![bottom-right color](vpl:block:bottom-right-color)",
					"Type: bloc d'action",
					"..."
				],
				"bottom color 8": [
					"# Set bottom color",
					"![bottom color 8](vpl:block:bottom-color-8)",
					"Type: bloc d'action",
					"..."
				],
				"bottom-left color 8": [
					"# Set bottom-left color",
					"![bottom-left color 8](vpl:block:bottom-left-color-8)",
					"Type: bloc d'action",
					"..."
				],
				"bottom-right color 8": [
					"# Set bottom-right color",
					"![bottom-right color 8](vpl:block:bottom-right-color-8)",
					"Type: bloc d'action",
					"..."
				],
				"notes": [
					"# Play melody",
					"![notes](vpl:block:notes)",
					"Type: bloc d'action",
					"..."
				],
				"play": [
					"# Play a .wav file",
					"![play](vpl:block:play)",
					"Type: bloc d'action",
					"..."
				],
				"play stop": [
					"# Stop playing a .wav file",
					"![play stop](vpl:block:play-stop)",
					"Type: bloc d'action",
					"..."
				],
				"set state": [
					"# Set state (4 bits)",
					"![set state](vpl:block:set-state)",
					"Type: bloc d'action",
					"..."
				],
				"toggle state": [
					"# Toggle state (4 bits)",
					"![toggle state](vpl:block:toggle-state)",
					"Type: bloc d'action",
					"..."
				],
				"set state 8": [
					"# Set state (8 values)",
					"![set state 8](vpl:block:set-state-8)",
					"Type: bloc d'action",
					"..."
				],
				"change state 8": [
					"# Set to next or previous state (8 values)",
					"![change state 8](vpl:block:change-state-8)",
					"Type: bloc d'action",
					"..."
				],
				"set counter": [
					"# Set counter",
					"![set counter](vpl:block:set-counter)",
					"Type: bloc d'action",
					"..."
				],
				"set timer": [
					"# Start timer (0-4 sec)",
					"![set timer](vpl:block:set-timer)",
					"Type: bloc d'action",
					"..."
				],
				"set timer log": [
					"# Set timer (0.1-10 sec)",
					"![set timer log](vpl:block:set-timer-log)",
					"Type: bloc d'action",
					"..."
				],
				"picture comment": [
					"# Picture comment",
					"![picture comment](vpl:block:picture-comment)",
					"Type: block de commentaire",
					"..."
				]
			}
		}
	}
}
